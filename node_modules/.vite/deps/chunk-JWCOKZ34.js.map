{
  "version": 3,
  "sources": ["../../dagre-d3-es/src/graphlib/graph.js"],
  "sourcesContent": ["import * as _ from 'lodash-es';\r\n\r\nvar DEFAULT_EDGE_NAME = '\\x00';\r\nvar GRAPH_NODE = '\\x00';\r\nvar EDGE_KEY_DELIM = '\\x01';\r\n\r\n// Implementation notes:\r\n//\r\n//  * Node id query functions should return string ids for the nodes\r\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\r\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\r\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\r\n//    reference edges. This is because we need a performant way to look these\r\n//    edges up and, object properties, which have string keys, are the closest\r\n//    we're going to get to a performant hashtable in JavaScript.\r\n\r\n// Implementation notes:\r\n//\r\n//  * Node id query functions should return string ids for the nodes\r\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\r\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\r\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\r\n//    reference edges. This is because we need a performant way to look these\r\n//    edges up and, object properties, which have string keys, are the closest\r\n//    we're going to get to a performant hashtable in JavaScript.\r\nexport class Graph {\r\n  constructor(opts = {}) {\r\n    this._isDirected = _.has(opts, 'directed') ? opts.directed : true;\r\n    this._isMultigraph = _.has(opts, 'multigraph') ? opts.multigraph : false;\r\n    this._isCompound = _.has(opts, 'compound') ? opts.compound : false;\r\n\r\n    // Label for the graph itself\r\n    this._label = undefined;\r\n\r\n    // Defaults to be set when creating a new node\r\n    this._defaultNodeLabelFn = _.constant(undefined);\r\n\r\n    // Defaults to be set when creating a new edge\r\n    this._defaultEdgeLabelFn = _.constant(undefined);\r\n\r\n    // v -> label\r\n    this._nodes = {};\r\n\r\n    if (this._isCompound) {\r\n      // v -> parent\r\n      this._parent = {};\r\n\r\n      // v -> children\r\n      this._children = {};\r\n      this._children[GRAPH_NODE] = {};\r\n    }\r\n\r\n    // v -> edgeObj\r\n    this._in = {};\r\n\r\n    // u -> v -> Number\r\n    this._preds = {};\r\n\r\n    // v -> edgeObj\r\n    this._out = {};\r\n\r\n    // v -> w -> Number\r\n    this._sucs = {};\r\n\r\n    // e -> edgeObj\r\n    this._edgeObjs = {};\r\n\r\n    // e -> label\r\n    this._edgeLabels = {};\r\n  }\r\n  /* === Graph functions ========= */\r\n  isDirected() {\r\n    return this._isDirected;\r\n  }\r\n  isMultigraph() {\r\n    return this._isMultigraph;\r\n  }\r\n  isCompound() {\r\n    return this._isCompound;\r\n  }\r\n  setGraph(label) {\r\n    this._label = label;\r\n    return this;\r\n  }\r\n  graph() {\r\n    return this._label;\r\n  }\r\n  /* === Node functions ========== */\r\n  setDefaultNodeLabel(newDefault) {\r\n    if (!_.isFunction(newDefault)) {\r\n      newDefault = _.constant(newDefault);\r\n    }\r\n    this._defaultNodeLabelFn = newDefault;\r\n    return this;\r\n  }\r\n  nodeCount() {\r\n    return this._nodeCount;\r\n  }\r\n  nodes() {\r\n    return _.keys(this._nodes);\r\n  }\r\n  sources() {\r\n    var self = this;\r\n    return _.filter(this.nodes(), function (v) {\r\n      return _.isEmpty(self._in[v]);\r\n    });\r\n  }\r\n  sinks() {\r\n    var self = this;\r\n    return _.filter(this.nodes(), function (v) {\r\n      return _.isEmpty(self._out[v]);\r\n    });\r\n  }\r\n  setNodes(vs, value) {\r\n    var args = arguments;\r\n    var self = this;\r\n    _.each(vs, function (v) {\r\n      if (args.length > 1) {\r\n        self.setNode(v, value);\r\n      } else {\r\n        self.setNode(v);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n  setNode(v, value) {\r\n    if (_.has(this._nodes, v)) {\r\n      if (arguments.length > 1) {\r\n        this._nodes[v] = value;\r\n      }\r\n      return this;\r\n    }\r\n\r\n    // @ts-expect-error\r\n    this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);\r\n    if (this._isCompound) {\r\n      this._parent[v] = GRAPH_NODE;\r\n      this._children[v] = {};\r\n      this._children[GRAPH_NODE][v] = true;\r\n    }\r\n    this._in[v] = {};\r\n    this._preds[v] = {};\r\n    this._out[v] = {};\r\n    this._sucs[v] = {};\r\n    ++this._nodeCount;\r\n    return this;\r\n  }\r\n  node(v) {\r\n    return this._nodes[v];\r\n  }\r\n  hasNode(v) {\r\n    return _.has(this._nodes, v);\r\n  }\r\n  removeNode(v) {\r\n    var self = this;\r\n    if (_.has(this._nodes, v)) {\r\n      var removeEdge = function (e) {\r\n        self.removeEdge(self._edgeObjs[e]);\r\n      };\r\n      delete this._nodes[v];\r\n      if (this._isCompound) {\r\n        this._removeFromParentsChildList(v);\r\n        delete this._parent[v];\r\n        _.each(this.children(v), function (child) {\r\n          self.setParent(child);\r\n        });\r\n        delete this._children[v];\r\n      }\r\n      _.each(_.keys(this._in[v]), removeEdge);\r\n      delete this._in[v];\r\n      delete this._preds[v];\r\n      _.each(_.keys(this._out[v]), removeEdge);\r\n      delete this._out[v];\r\n      delete this._sucs[v];\r\n      --this._nodeCount;\r\n    }\r\n    return this;\r\n  }\r\n  setParent(v, parent) {\r\n    if (!this._isCompound) {\r\n      throw new Error('Cannot set parent in a non-compound graph');\r\n    }\r\n\r\n    if (_.isUndefined(parent)) {\r\n      parent = GRAPH_NODE;\r\n    } else {\r\n      // Coerce parent to string\r\n      parent += '';\r\n      for (var ancestor = parent; !_.isUndefined(ancestor); ancestor = this.parent(ancestor)) {\r\n        if (ancestor === v) {\r\n          throw new Error('Setting ' + parent + ' as parent of ' + v + ' would create a cycle');\r\n        }\r\n      }\r\n\r\n      this.setNode(parent);\r\n    }\r\n\r\n    this.setNode(v);\r\n    this._removeFromParentsChildList(v);\r\n    this._parent[v] = parent;\r\n    this._children[parent][v] = true;\r\n    return this;\r\n  }\r\n  _removeFromParentsChildList(v) {\r\n    delete this._children[this._parent[v]][v];\r\n  }\r\n  parent(v) {\r\n    if (this._isCompound) {\r\n      var parent = this._parent[v];\r\n      if (parent !== GRAPH_NODE) {\r\n        return parent;\r\n      }\r\n    }\r\n  }\r\n  children(v) {\r\n    if (_.isUndefined(v)) {\r\n      v = GRAPH_NODE;\r\n    }\r\n\r\n    if (this._isCompound) {\r\n      var children = this._children[v];\r\n      if (children) {\r\n        return _.keys(children);\r\n      }\r\n    } else if (v === GRAPH_NODE) {\r\n      return this.nodes();\r\n    } else if (this.hasNode(v)) {\r\n      return [];\r\n    }\r\n  }\r\n  predecessors(v) {\r\n    var predsV = this._preds[v];\r\n    if (predsV) {\r\n      return _.keys(predsV);\r\n    }\r\n  }\r\n  successors(v) {\r\n    var sucsV = this._sucs[v];\r\n    if (sucsV) {\r\n      return _.keys(sucsV);\r\n    }\r\n  }\r\n  neighbors(v) {\r\n    var preds = this.predecessors(v);\r\n    if (preds) {\r\n      return _.union(preds, this.successors(v));\r\n    }\r\n  }\r\n  isLeaf(v) {\r\n    var neighbors;\r\n    if (this.isDirected()) {\r\n      neighbors = this.successors(v);\r\n    } else {\r\n      neighbors = this.neighbors(v);\r\n    }\r\n    return neighbors.length === 0;\r\n  }\r\n  filterNodes(filter) {\r\n    // @ts-expect-error\r\n    var copy = new this.constructor({\r\n      directed: this._isDirected,\r\n      multigraph: this._isMultigraph,\r\n      compound: this._isCompound,\r\n    });\r\n\r\n    copy.setGraph(this.graph());\r\n\r\n    var self = this;\r\n    _.each(this._nodes, function (value, v) {\r\n      if (filter(v)) {\r\n        copy.setNode(v, value);\r\n      }\r\n    });\r\n\r\n    _.each(this._edgeObjs, function (e) {\r\n      // @ts-expect-error\r\n      if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\r\n        copy.setEdge(e, self.edge(e));\r\n      }\r\n    });\r\n\r\n    var parents = {};\r\n    function findParent(v) {\r\n      var parent = self.parent(v);\r\n      if (parent === undefined || copy.hasNode(parent)) {\r\n        parents[v] = parent;\r\n        return parent;\r\n      } else if (parent in parents) {\r\n        return parents[parent];\r\n      } else {\r\n        return findParent(parent);\r\n      }\r\n    }\r\n\r\n    if (this._isCompound) {\r\n      _.each(copy.nodes(), function (v) {\r\n        copy.setParent(v, findParent(v));\r\n      });\r\n    }\r\n\r\n    return copy;\r\n  }\r\n  /* === Edge functions ========== */\r\n  setDefaultEdgeLabel(newDefault) {\r\n    if (!_.isFunction(newDefault)) {\r\n      newDefault = _.constant(newDefault);\r\n    }\r\n    this._defaultEdgeLabelFn = newDefault;\r\n    return this;\r\n  }\r\n  edgeCount() {\r\n    return this._edgeCount;\r\n  }\r\n  edges() {\r\n    return _.values(this._edgeObjs);\r\n  }\r\n  setPath(vs, value) {\r\n    var self = this;\r\n    var args = arguments;\r\n    _.reduce(vs, function (v, w) {\r\n      if (args.length > 1) {\r\n        self.setEdge(v, w, value);\r\n      } else {\r\n        self.setEdge(v, w);\r\n      }\r\n      return w;\r\n    });\r\n    return this;\r\n  }\r\n  /*\r\n   * setEdge(v, w, [value, [name]])\r\n   * setEdge({ v, w, [name] }, [value])\r\n   */\r\n  setEdge() {\r\n    var v, w, name, value;\r\n    var valueSpecified = false;\r\n    var arg0 = arguments[0];\r\n\r\n    if (typeof arg0 === 'object' && arg0 !== null && 'v' in arg0) {\r\n      v = arg0.v;\r\n      w = arg0.w;\r\n      name = arg0.name;\r\n      if (arguments.length === 2) {\r\n        value = arguments[1];\r\n        valueSpecified = true;\r\n      }\r\n    } else {\r\n      v = arg0;\r\n      w = arguments[1];\r\n      name = arguments[3];\r\n      if (arguments.length > 2) {\r\n        value = arguments[2];\r\n        valueSpecified = true;\r\n      }\r\n    }\r\n\r\n    v = '' + v;\r\n    w = '' + w;\r\n    if (!_.isUndefined(name)) {\r\n      name = '' + name;\r\n    }\r\n\r\n    var e = edgeArgsToId(this._isDirected, v, w, name);\r\n    if (_.has(this._edgeLabels, e)) {\r\n      if (valueSpecified) {\r\n        this._edgeLabels[e] = value;\r\n      }\r\n      return this;\r\n    }\r\n\r\n    if (!_.isUndefined(name) && !this._isMultigraph) {\r\n      throw new Error('Cannot set a named edge when isMultigraph = false');\r\n    }\r\n\r\n    // It didn't exist, so we need to create it.\r\n    // First ensure the nodes exist.\r\n    this.setNode(v);\r\n    this.setNode(w);\r\n\r\n    // @ts-expect-error\r\n    this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);\r\n\r\n    var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);\r\n    // Ensure we add undirected edges in a consistent way.\r\n    v = edgeObj.v;\r\n    w = edgeObj.w;\r\n\r\n    Object.freeze(edgeObj);\r\n    this._edgeObjs[e] = edgeObj;\r\n    incrementOrInitEntry(this._preds[w], v);\r\n    incrementOrInitEntry(this._sucs[v], w);\r\n    this._in[w][e] = edgeObj;\r\n    this._out[v][e] = edgeObj;\r\n    this._edgeCount++;\r\n    return this;\r\n  }\r\n  edge(v, w, name) {\r\n    var e =\r\n      arguments.length === 1\r\n        ? edgeObjToId(this._isDirected, arguments[0])\r\n        : edgeArgsToId(this._isDirected, v, w, name);\r\n    return this._edgeLabels[e];\r\n  }\r\n  hasEdge(v, w, name) {\r\n    var e =\r\n      arguments.length === 1\r\n        ? edgeObjToId(this._isDirected, arguments[0])\r\n        : edgeArgsToId(this._isDirected, v, w, name);\r\n    return _.has(this._edgeLabels, e);\r\n  }\r\n  removeEdge(v, w, name) {\r\n    var e =\r\n      arguments.length === 1\r\n        ? edgeObjToId(this._isDirected, arguments[0])\r\n        : edgeArgsToId(this._isDirected, v, w, name);\r\n    var edge = this._edgeObjs[e];\r\n    if (edge) {\r\n      v = edge.v;\r\n      w = edge.w;\r\n      delete this._edgeLabels[e];\r\n      delete this._edgeObjs[e];\r\n      decrementOrRemoveEntry(this._preds[w], v);\r\n      decrementOrRemoveEntry(this._sucs[v], w);\r\n      delete this._in[w][e];\r\n      delete this._out[v][e];\r\n      this._edgeCount--;\r\n    }\r\n    return this;\r\n  }\r\n  inEdges(v, u) {\r\n    var inV = this._in[v];\r\n    if (inV) {\r\n      var edges = _.values(inV);\r\n      if (!u) {\r\n        return edges;\r\n      }\r\n      return _.filter(edges, function (edge) {\r\n        return edge.v === u;\r\n      });\r\n    }\r\n  }\r\n  outEdges(v, w) {\r\n    var outV = this._out[v];\r\n    if (outV) {\r\n      var edges = _.values(outV);\r\n      if (!w) {\r\n        return edges;\r\n      }\r\n      return _.filter(edges, function (edge) {\r\n        return edge.w === w;\r\n      });\r\n    }\r\n  }\r\n  nodeEdges(v, w) {\r\n    var inEdges = this.inEdges(v, w);\r\n    if (inEdges) {\r\n      return inEdges.concat(this.outEdges(v, w));\r\n    }\r\n  }\r\n}\r\n\r\n/* Number of nodes in the graph. Should only be changed by the implementation. */\r\nGraph.prototype._nodeCount = 0;\r\n\r\n/* Number of edges in the graph. Should only be changed by the implementation. */\r\nGraph.prototype._edgeCount = 0;\r\n\r\nfunction incrementOrInitEntry(map, k) {\r\n  if (map[k]) {\r\n    map[k]++;\r\n  } else {\r\n    map[k] = 1;\r\n  }\r\n}\r\n\r\nfunction decrementOrRemoveEntry(map, k) {\r\n  if (!--map[k]) {\r\n    delete map[k];\r\n  }\r\n}\r\n\r\nfunction edgeArgsToId(isDirected, v_, w_, name) {\r\n  var v = '' + v_;\r\n  var w = '' + w_;\r\n  if (!isDirected && v > w) {\r\n    var tmp = v;\r\n    v = w;\r\n    w = tmp;\r\n  }\r\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM + (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);\r\n}\r\n\r\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\r\n  var v = '' + v_;\r\n  var w = '' + w_;\r\n  if (!isDirected && v > w) {\r\n    var tmp = v;\r\n    v = w;\r\n    w = tmp;\r\n  }\r\n  var edgeObj = { v: v, w: w };\r\n  if (name) {\r\n    edgeObj.name = name;\r\n  }\r\n  return edgeObj;\r\n}\r\n\r\nfunction edgeObjToId(isDirected, edgeObj) {\r\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
