{
  "version": 3,
  "sources": ["../../mermaid/dist/chunks/mermaid.core/diagram-AVGMFHF7.mjs"],
  "sourcesContent": ["import {\r\n  populateCommonDb\r\n} from \"./chunk-RYO7GUH3.mjs\";\r\nimport {\r\n  cleanAndMerge\r\n} from \"./chunk-TLUHKHBO.mjs\";\r\nimport {\r\n  selectSvgElement\r\n} from \"./chunk-OBAELV6Q.mjs\";\r\nimport {\r\n  __name,\r\n  clear,\r\n  configureSvgSize,\r\n  defaultConfig_default,\r\n  getAccDescription,\r\n  getAccTitle,\r\n  getConfig,\r\n  getDiagramTitle,\r\n  log,\r\n  setAccDescription,\r\n  setAccTitle,\r\n  setDiagramTitle\r\n} from \"./chunk-S24QXQKS.mjs\";\r\n\r\n// src/diagrams/packet/db.ts\r\nvar defaultPacketData = {\r\n  packet: []\r\n};\r\nvar data = structuredClone(defaultPacketData);\r\nvar DEFAULT_PACKET_CONFIG = defaultConfig_default.packet;\r\nvar getConfig2 = /* @__PURE__ */ __name(() => {\r\n  const config = cleanAndMerge({\r\n    ...DEFAULT_PACKET_CONFIG,\r\n    ...getConfig().packet\r\n  });\r\n  if (config.showBits) {\r\n    config.paddingY += 10;\r\n  }\r\n  return config;\r\n}, \"getConfig\");\r\nvar getPacket = /* @__PURE__ */ __name(() => data.packet, \"getPacket\");\r\nvar pushWord = /* @__PURE__ */ __name((word) => {\r\n  if (word.length > 0) {\r\n    data.packet.push(word);\r\n  }\r\n}, \"pushWord\");\r\nvar clear2 = /* @__PURE__ */ __name(() => {\r\n  clear();\r\n  data = structuredClone(defaultPacketData);\r\n}, \"clear\");\r\nvar db = {\r\n  pushWord,\r\n  getPacket,\r\n  getConfig: getConfig2,\r\n  clear: clear2,\r\n  setAccTitle,\r\n  getAccTitle,\r\n  setDiagramTitle,\r\n  getDiagramTitle,\r\n  getAccDescription,\r\n  setAccDescription\r\n};\r\n\r\n// src/diagrams/packet/parser.ts\r\nimport { parse } from \"@mermaid-js/parser\";\r\nvar maxPacketSize = 1e4;\r\nvar populate = /* @__PURE__ */ __name((ast) => {\r\n  populateCommonDb(ast, db);\r\n  let lastByte = -1;\r\n  let word = [];\r\n  let row = 1;\r\n  const { bitsPerRow } = db.getConfig();\r\n  for (let { start, end, label } of ast.blocks) {\r\n    if (end && end < start) {\r\n      throw new Error(`Packet block ${start} - ${end} is invalid. End must be greater than start.`);\r\n    }\r\n    if (start !== lastByte + 1) {\r\n      throw new Error(\r\n        `Packet block ${start} - ${end ?? start} is not contiguous. It should start from ${lastByte + 1}.`\r\n      );\r\n    }\r\n    lastByte = end ?? start;\r\n    log.debug(`Packet block ${start} - ${lastByte} with label ${label}`);\r\n    while (word.length <= bitsPerRow + 1 && db.getPacket().length < maxPacketSize) {\r\n      const [block, nextBlock] = getNextFittingBlock({ start, end, label }, row, bitsPerRow);\r\n      word.push(block);\r\n      if (block.end + 1 === row * bitsPerRow) {\r\n        db.pushWord(word);\r\n        word = [];\r\n        row++;\r\n      }\r\n      if (!nextBlock) {\r\n        break;\r\n      }\r\n      ({ start, end, label } = nextBlock);\r\n    }\r\n  }\r\n  db.pushWord(word);\r\n}, \"populate\");\r\nvar getNextFittingBlock = /* @__PURE__ */ __name((block, row, bitsPerRow) => {\r\n  if (block.end === void 0) {\r\n    block.end = block.start;\r\n  }\r\n  if (block.start > block.end) {\r\n    throw new Error(`Block start ${block.start} is greater than block end ${block.end}.`);\r\n  }\r\n  if (block.end + 1 <= row * bitsPerRow) {\r\n    return [block, void 0];\r\n  }\r\n  return [\r\n    {\r\n      start: block.start,\r\n      end: row * bitsPerRow - 1,\r\n      label: block.label\r\n    },\r\n    {\r\n      start: row * bitsPerRow,\r\n      end: block.end,\r\n      label: block.label\r\n    }\r\n  ];\r\n}, \"getNextFittingBlock\");\r\nvar parser = {\r\n  parse: /* @__PURE__ */ __name(async (input) => {\r\n    const ast = await parse(\"packet\", input);\r\n    log.debug(ast);\r\n    populate(ast);\r\n  }, \"parse\")\r\n};\r\n\r\n// src/diagrams/packet/renderer.ts\r\nvar draw = /* @__PURE__ */ __name((_text, id, _version, diagram2) => {\r\n  const db2 = diagram2.db;\r\n  const config = db2.getConfig();\r\n  const { rowHeight, paddingY, bitWidth, bitsPerRow } = config;\r\n  const words = db2.getPacket();\r\n  const title = db2.getDiagramTitle();\r\n  const totalRowHeight = rowHeight + paddingY;\r\n  const svgHeight = totalRowHeight * (words.length + 1) - (title ? 0 : rowHeight);\r\n  const svgWidth = bitWidth * bitsPerRow + 2;\r\n  const svg = selectSvgElement(id);\r\n  svg.attr(\"viewbox\", `0 0 ${svgWidth} ${svgHeight}`);\r\n  configureSvgSize(svg, svgHeight, svgWidth, config.useMaxWidth);\r\n  for (const [word, packet] of words.entries()) {\r\n    drawWord(svg, packet, word, config);\r\n  }\r\n  svg.append(\"text\").text(title).attr(\"x\", svgWidth / 2).attr(\"y\", svgHeight - totalRowHeight / 2).attr(\"dominant-baseline\", \"middle\").attr(\"text-anchor\", \"middle\").attr(\"class\", \"packetTitle\");\r\n}, \"draw\");\r\nvar drawWord = /* @__PURE__ */ __name((svg, word, rowNumber, { rowHeight, paddingX, paddingY, bitWidth, bitsPerRow, showBits }) => {\r\n  const group = svg.append(\"g\");\r\n  const wordY = rowNumber * (rowHeight + paddingY) + paddingY;\r\n  for (const block of word) {\r\n    const blockX = block.start % bitsPerRow * bitWidth + 1;\r\n    const width = (block.end - block.start + 1) * bitWidth - paddingX;\r\n    group.append(\"rect\").attr(\"x\", blockX).attr(\"y\", wordY).attr(\"width\", width).attr(\"height\", rowHeight).attr(\"class\", \"packetBlock\");\r\n    group.append(\"text\").attr(\"x\", blockX + width / 2).attr(\"y\", wordY + rowHeight / 2).attr(\"class\", \"packetLabel\").attr(\"dominant-baseline\", \"middle\").attr(\"text-anchor\", \"middle\").text(block.label);\r\n    if (!showBits) {\r\n      continue;\r\n    }\r\n    const isSingleBlock = block.end === block.start;\r\n    const bitNumberY = wordY - 2;\r\n    group.append(\"text\").attr(\"x\", blockX + (isSingleBlock ? width / 2 : 0)).attr(\"y\", bitNumberY).attr(\"class\", \"packetByte start\").attr(\"dominant-baseline\", \"auto\").attr(\"text-anchor\", isSingleBlock ? \"middle\" : \"start\").text(block.start);\r\n    if (!isSingleBlock) {\r\n      group.append(\"text\").attr(\"x\", blockX + width).attr(\"y\", bitNumberY).attr(\"class\", \"packetByte end\").attr(\"dominant-baseline\", \"auto\").attr(\"text-anchor\", \"end\").text(block.end);\r\n    }\r\n  }\r\n}, \"drawWord\");\r\nvar renderer = { draw };\r\n\r\n// src/diagrams/packet/styles.ts\r\nvar defaultPacketStyleOptions = {\r\n  byteFontSize: \"10px\",\r\n  startByteColor: \"black\",\r\n  endByteColor: \"black\",\r\n  labelColor: \"black\",\r\n  labelFontSize: \"12px\",\r\n  titleColor: \"black\",\r\n  titleFontSize: \"14px\",\r\n  blockStrokeColor: \"black\",\r\n  blockStrokeWidth: \"1\",\r\n  blockFillColor: \"#efefef\"\r\n};\r\nvar styles = /* @__PURE__ */ __name(({ packet } = {}) => {\r\n  const options = cleanAndMerge(defaultPacketStyleOptions, packet);\r\n  return `\r\n\t.packetByte {\r\n\t\tfont-size: ${options.byteFontSize};\r\n\t}\r\n\t.packetByte.start {\r\n\t\tfill: ${options.startByteColor};\r\n\t}\r\n\t.packetByte.end {\r\n\t\tfill: ${options.endByteColor};\r\n\t}\r\n\t.packetLabel {\r\n\t\tfill: ${options.labelColor};\r\n\t\tfont-size: ${options.labelFontSize};\r\n\t}\r\n\t.packetTitle {\r\n\t\tfill: ${options.titleColor};\r\n\t\tfont-size: ${options.titleFontSize};\r\n\t}\r\n\t.packetBlock {\r\n\t\tstroke: ${options.blockStrokeColor};\r\n\t\tstroke-width: ${options.blockStrokeWidth};\r\n\t\tfill: ${options.blockFillColor};\r\n\t}\r\n\t`;\r\n}, \"styles\");\r\n\r\n// src/diagrams/packet/diagram.ts\r\nvar diagram = {\r\n  parser,\r\n  db,\r\n  renderer,\r\n  styles\r\n};\r\nexport {\r\n  diagram\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
