{
  "version": 3,
  "sources": ["../../@braintree/sanitize-url/dist/constants.js", "../../@braintree/sanitize-url/dist/index.js"],
  "sourcesContent": ["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BLANK_URL = exports.relativeFirstCharacters = exports.whitespaceEscapeCharsRegex = exports.urlSchemeRegex = exports.ctrlCharactersRegex = exports.htmlCtrlEntityRegex = exports.htmlEntitiesRegex = exports.invalidProtocolRegex = void 0;\r\nexports.invalidProtocolRegex = /^([^\\w]*)(javascript|data|vbscript)/im;\r\nexports.htmlEntitiesRegex = /&#(\\w+)(^\\w|;)?/g;\r\nexports.htmlCtrlEntityRegex = /&(newline|tab);/gi;\r\nexports.ctrlCharactersRegex = /[\\u0000-\\u001F\\u007F-\\u009F\\u2000-\\u200D\\uFEFF]/gim;\r\nexports.urlSchemeRegex = /^.+(:|&colon;)/gim;\r\nexports.whitespaceEscapeCharsRegex = /(\\\\|%5[cC])((%(6[eE]|72|74))|[nrt])/g;\r\nexports.relativeFirstCharacters = [\".\", \"/\"];\r\nexports.BLANK_URL = \"about:blank\";\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.sanitizeUrl = void 0;\r\nvar constants_1 = require(\"./constants\");\r\nfunction isRelativeUrlWithoutProtocol(url) {\r\n    return constants_1.relativeFirstCharacters.indexOf(url[0]) > -1;\r\n}\r\nfunction decodeHtmlCharacters(str) {\r\n    var removedNullByte = str.replace(constants_1.ctrlCharactersRegex, \"\");\r\n    return removedNullByte.replace(constants_1.htmlEntitiesRegex, function (match, dec) {\r\n        return String.fromCharCode(dec);\r\n    });\r\n}\r\nfunction isValidUrl(url) {\r\n    return URL.canParse(url);\r\n}\r\nfunction decodeURI(uri) {\r\n    try {\r\n        return decodeURIComponent(uri);\r\n    }\r\n    catch (e) {\r\n        // Ignoring error\r\n        // It is possible that the URI contains a `%` not associated\r\n        // with URI/URL-encoding.\r\n        return uri;\r\n    }\r\n}\r\nfunction sanitizeUrl(url) {\r\n    if (!url) {\r\n        return constants_1.BLANK_URL;\r\n    }\r\n    var charsToDecode;\r\n    var decodedUrl = decodeURI(url.trim());\r\n    do {\r\n        decodedUrl = decodeHtmlCharacters(decodedUrl)\r\n            .replace(constants_1.htmlCtrlEntityRegex, \"\")\r\n            .replace(constants_1.ctrlCharactersRegex, \"\")\r\n            .replace(constants_1.whitespaceEscapeCharsRegex, \"\")\r\n            .trim();\r\n        decodedUrl = decodeURI(decodedUrl);\r\n        charsToDecode =\r\n            decodedUrl.match(constants_1.ctrlCharactersRegex) ||\r\n                decodedUrl.match(constants_1.htmlEntitiesRegex) ||\r\n                decodedUrl.match(constants_1.htmlCtrlEntityRegex) ||\r\n                decodedUrl.match(constants_1.whitespaceEscapeCharsRegex);\r\n    } while (charsToDecode && charsToDecode.length > 0);\r\n    var sanitizedUrl = decodedUrl;\r\n    if (!sanitizedUrl) {\r\n        return constants_1.BLANK_URL;\r\n    }\r\n    if (isRelativeUrlWithoutProtocol(sanitizedUrl)) {\r\n        return sanitizedUrl;\r\n    }\r\n    // Remove any leading whitespace before checking the URL scheme\r\n    var trimmedUrl = sanitizedUrl.trimStart();\r\n    var urlSchemeParseResults = trimmedUrl.match(constants_1.urlSchemeRegex);\r\n    if (!urlSchemeParseResults) {\r\n        return sanitizedUrl;\r\n    }\r\n    var urlScheme = urlSchemeParseResults[0].toLowerCase().trim();\r\n    if (constants_1.invalidProtocolRegex.test(urlScheme)) {\r\n        return constants_1.BLANK_URL;\r\n    }\r\n    var backSanitized = trimmedUrl.replace(/\\\\/g, \"/\");\r\n    // Handle special cases for mailto: and custom deep-link protocols\r\n    if (urlScheme === \"mailto:\" || urlScheme.includes(\"://\")) {\r\n        return backSanitized;\r\n    }\r\n    // For http and https URLs, perform additional validation\r\n    if (urlScheme === \"http:\" || urlScheme === \"https:\") {\r\n        if (!isValidUrl(backSanitized)) {\r\n            return constants_1.BLANK_URL;\r\n        }\r\n        var url_1 = new URL(backSanitized);\r\n        url_1.protocol = url_1.protocol.toLowerCase();\r\n        url_1.hostname = url_1.hostname.toLowerCase();\r\n        return url_1.toString();\r\n    }\r\n    return backSanitized;\r\n}\r\nexports.sanitizeUrl = sanitizeUrl;\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAAA;AACA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAC5D,YAAQ,YAAY,QAAQ,0BAA0B,QAAQ,6BAA6B,QAAQ,iBAAiB,QAAQ,sBAAsB,QAAQ,sBAAsB,QAAQ,oBAAoB,QAAQ,uBAAuB;AAC3O,YAAQ,uBAAuB;AAC/B,YAAQ,oBAAoB;AAC5B,YAAQ,sBAAsB;AAC9B,YAAQ,sBAAsB;AAC9B,YAAQ,iBAAiB;AACzB,YAAQ,6BAA6B;AACrC,YAAQ,0BAA0B,CAAC,KAAK,GAAG;AAC3C,YAAQ,YAAY;AAAA;AAAA;;;ACVpB;AAAA;AAAA;AACA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAC5D,YAAQ,cAAc;AACtB,QAAI,cAAc;AAClB,aAAS,6BAA6B,KAAK;AACvC,aAAO,YAAY,wBAAwB,QAAQ,IAAI,CAAC,CAAC,IAAI;AAAA,IACjE;AACA,aAAS,qBAAqB,KAAK;AAC/B,UAAI,kBAAkB,IAAI,QAAQ,YAAY,qBAAqB,EAAE;AACrE,aAAO,gBAAgB,QAAQ,YAAY,mBAAmB,SAAU,OAAO,KAAK;AAChF,eAAO,OAAO,aAAa,GAAG;AAAA,MAClC,CAAC;AAAA,IACL;AACA,aAAS,WAAW,KAAK;AACrB,aAAO,IAAI,SAAS,GAAG;AAAA,IAC3B;AACA,aAAS,UAAU,KAAK;AACpB,UAAI;AACA,eAAO,mBAAmB,GAAG;AAAA,MACjC,SACO,GAAG;AAIN,eAAO;AAAA,MACX;AAAA,IACJ;AACA,aAAS,YAAY,KAAK;AACtB,UAAI,CAAC,KAAK;AACN,eAAO,YAAY;AAAA,MACvB;AACA,UAAI;AACJ,UAAI,aAAa,UAAU,IAAI,KAAK,CAAC;AACrC,SAAG;AACC,qBAAa,qBAAqB,UAAU,EACvC,QAAQ,YAAY,qBAAqB,EAAE,EAC3C,QAAQ,YAAY,qBAAqB,EAAE,EAC3C,QAAQ,YAAY,4BAA4B,EAAE,EAClD,KAAK;AACV,qBAAa,UAAU,UAAU;AACjC,wBACI,WAAW,MAAM,YAAY,mBAAmB,KAC5C,WAAW,MAAM,YAAY,iBAAiB,KAC9C,WAAW,MAAM,YAAY,mBAAmB,KAChD,WAAW,MAAM,YAAY,0BAA0B;AAAA,MACnE,SAAS,iBAAiB,cAAc,SAAS;AACjD,UAAI,eAAe;AACnB,UAAI,CAAC,cAAc;AACf,eAAO,YAAY;AAAA,MACvB;AACA,UAAI,6BAA6B,YAAY,GAAG;AAC5C,eAAO;AAAA,MACX;AAEA,UAAI,aAAa,aAAa,UAAU;AACxC,UAAI,wBAAwB,WAAW,MAAM,YAAY,cAAc;AACvE,UAAI,CAAC,uBAAuB;AACxB,eAAO;AAAA,MACX;AACA,UAAI,YAAY,sBAAsB,CAAC,EAAE,YAAY,EAAE,KAAK;AAC5D,UAAI,YAAY,qBAAqB,KAAK,SAAS,GAAG;AAClD,eAAO,YAAY;AAAA,MACvB;AACA,UAAI,gBAAgB,WAAW,QAAQ,OAAO,GAAG;AAEjD,UAAI,cAAc,aAAa,UAAU,SAAS,KAAK,GAAG;AACtD,eAAO;AAAA,MACX;AAEA,UAAI,cAAc,WAAW,cAAc,UAAU;AACjD,YAAI,CAAC,WAAW,aAAa,GAAG;AAC5B,iBAAO,YAAY;AAAA,QACvB;AACA,YAAI,QAAQ,IAAI,IAAI,aAAa;AACjC,cAAM,WAAW,MAAM,SAAS,YAAY;AAC5C,cAAM,WAAW,MAAM,SAAS,YAAY;AAC5C,eAAO,MAAM,SAAS;AAAA,MAC1B;AACA,aAAO;AAAA,IACX;AACA,YAAQ,cAAc;AAAA;AAAA;",
  "names": []
}
