{
  "version": 3,
  "sources": ["../../mermaid/dist/chunks/mermaid.core/dagre-7KT5K2WU.mjs"],
  "sourcesContent": ["import {\r\n  clear,\r\n  clear2,\r\n  clear3,\r\n  insertCluster,\r\n  insertEdge,\r\n  insertEdgeLabel,\r\n  insertNode,\r\n  markers_default,\r\n  positionEdgeLabel,\r\n  positionNode,\r\n  setNodeElem,\r\n  updateNodeBounds\r\n} from \"./chunk-O5FTX4FK.mjs\";\r\nimport \"./chunk-CTJGIJSU.mjs\";\r\nimport {\r\n  getSubGraphTitleMargins\r\n} from \"./chunk-I3FGKTZ5.mjs\";\r\nimport \"./chunk-U7L4IQIU.mjs\";\r\nimport \"./chunk-TLUHKHBO.mjs\";\r\nimport {\r\n  __name,\r\n  getConfig2 as getConfig,\r\n  log\r\n} from \"./chunk-S24QXQKS.mjs\";\r\n\r\n// src/rendering-util/layout-algorithms/dagre/index.js\r\nimport { layout as dagreLayout } from \"dagre-d3-es/src/dagre/index.js\";\r\nimport * as graphlibJson2 from \"dagre-d3-es/src/graphlib/json.js\";\r\nimport * as graphlib2 from \"dagre-d3-es/src/graphlib/index.js\";\r\n\r\n// src/rendering-util/layout-algorithms/dagre/mermaid-graphlib.js\r\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\r\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\r\nvar clusterDb = /* @__PURE__ */ new Map();\r\nvar descendants = /* @__PURE__ */ new Map();\r\nvar parents = /* @__PURE__ */ new Map();\r\nvar clear4 = /* @__PURE__ */ __name(() => {\r\n  descendants.clear();\r\n  parents.clear();\r\n  clusterDb.clear();\r\n}, \"clear\");\r\nvar isDescendant = /* @__PURE__ */ __name((id, ancestorId) => {\r\n  const ancestorDescendants = descendants.get(ancestorId) || [];\r\n  log.trace(\"In isDescendant\", ancestorId, \" \", id, \" = \", ancestorDescendants.includes(id));\r\n  return ancestorDescendants.includes(id);\r\n}, \"isDescendant\");\r\nvar edgeInCluster = /* @__PURE__ */ __name((edge, clusterId) => {\r\n  const clusterDescendants = descendants.get(clusterId) || [];\r\n  log.info(\"Descendants of \", clusterId, \" is \", clusterDescendants);\r\n  log.info(\"Edge is \", edge);\r\n  if (edge.v === clusterId || edge.w === clusterId) {\r\n    return false;\r\n  }\r\n  if (!clusterDescendants) {\r\n    log.debug(\"Tilt, \", clusterId, \",not in descendants\");\r\n    return false;\r\n  }\r\n  return clusterDescendants.includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || clusterDescendants.includes(edge.w);\r\n}, \"edgeInCluster\");\r\nvar copy = /* @__PURE__ */ __name((clusterId, graph, newGraph, rootId) => {\r\n  log.warn(\r\n    \"Copying children of \",\r\n    clusterId,\r\n    \"root\",\r\n    rootId,\r\n    \"data\",\r\n    graph.node(clusterId),\r\n    rootId\r\n  );\r\n  const nodes = graph.children(clusterId) || [];\r\n  if (clusterId !== rootId) {\r\n    nodes.push(clusterId);\r\n  }\r\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\r\n  nodes.forEach((node) => {\r\n    if (graph.children(node).length > 0) {\r\n      copy(node, graph, newGraph, rootId);\r\n    } else {\r\n      const data = graph.node(node);\r\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\r\n      newGraph.setNode(node, data);\r\n      if (rootId !== graph.parent(node)) {\r\n        log.warn(\"Setting parent\", node, graph.parent(node));\r\n        newGraph.setParent(node, graph.parent(node));\r\n      }\r\n      if (clusterId !== rootId && node !== clusterId) {\r\n        log.debug(\"Setting parent\", node, clusterId);\r\n        newGraph.setParent(node, clusterId);\r\n      } else {\r\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\r\n        log.debug(\r\n          \"Not Setting parent for node=\",\r\n          node,\r\n          \"cluster!==rootId\",\r\n          clusterId !== rootId,\r\n          \"node!==clusterId\",\r\n          node !== clusterId\r\n        );\r\n      }\r\n      const edges = graph.edges(node);\r\n      log.debug(\"Copying Edges\", edges);\r\n      edges.forEach((edge) => {\r\n        log.info(\"Edge\", edge);\r\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\r\n        log.info(\"Edge data\", data2, rootId);\r\n        try {\r\n          if (edgeInCluster(edge, rootId)) {\r\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\r\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\r\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\r\n          } else {\r\n            log.info(\r\n              \"Skipping copy of edge \",\r\n              edge.v,\r\n              \"-->\",\r\n              edge.w,\r\n              \" rootId: \",\r\n              rootId,\r\n              \" clusterId:\",\r\n              clusterId\r\n            );\r\n          }\r\n        } catch (e) {\r\n          log.error(e);\r\n        }\r\n      });\r\n    }\r\n    log.debug(\"Removing node\", node);\r\n    graph.removeNode(node);\r\n  });\r\n}, \"copy\");\r\nvar extractDescendants = /* @__PURE__ */ __name((id, graph) => {\r\n  const children = graph.children(id);\r\n  let res = [...children];\r\n  for (const child of children) {\r\n    parents.set(child, id);\r\n    res = [...res, ...extractDescendants(child, graph)];\r\n  }\r\n  return res;\r\n}, \"extractDescendants\");\r\nvar findCommonEdges = /* @__PURE__ */ __name((graph, id1, id2) => {\r\n  const edges1 = graph.edges().filter((edge) => edge.v === id1 || edge.w === id1);\r\n  const edges2 = graph.edges().filter((edge) => edge.v === id2 || edge.w === id2);\r\n  const edges1Prim = edges1.map((edge) => {\r\n    return { v: edge.v === id1 ? id2 : edge.v, w: edge.w === id1 ? id1 : edge.w };\r\n  });\r\n  const edges2Prim = edges2.map((edge) => {\r\n    return { v: edge.v, w: edge.w };\r\n  });\r\n  const result = edges1Prim.filter((edgeIn1) => {\r\n    return edges2Prim.some((edge) => edgeIn1.v === edge.v && edgeIn1.w === edge.w);\r\n  });\r\n  return result;\r\n}, \"findCommonEdges\");\r\nvar findNonClusterChild = /* @__PURE__ */ __name((id, graph, clusterId) => {\r\n  const children = graph.children(id);\r\n  log.trace(\"Searching children of id \", id, children);\r\n  if (children.length < 1) {\r\n    return id;\r\n  }\r\n  let reserve;\r\n  for (const child of children) {\r\n    const _id = findNonClusterChild(child, graph, clusterId);\r\n    const commonEdges = findCommonEdges(graph, clusterId, _id);\r\n    if (_id) {\r\n      if (commonEdges.length > 0) {\r\n        reserve = _id;\r\n      } else {\r\n        return _id;\r\n      }\r\n    }\r\n  }\r\n  return reserve;\r\n}, \"findNonClusterChild\");\r\nvar getAnchorId = /* @__PURE__ */ __name((id) => {\r\n  if (!clusterDb.has(id)) {\r\n    return id;\r\n  }\r\n  if (!clusterDb.get(id).externalConnections) {\r\n    return id;\r\n  }\r\n  if (clusterDb.has(id)) {\r\n    return clusterDb.get(id).id;\r\n  }\r\n  return id;\r\n}, \"getAnchorId\");\r\nvar adjustClustersAndEdges = /* @__PURE__ */ __name((graph, depth) => {\r\n  if (!graph || depth > 10) {\r\n    log.debug(\"Opting out, no graph \");\r\n    return;\r\n  } else {\r\n    log.debug(\"Opting in, graph \");\r\n  }\r\n  graph.nodes().forEach(function(id) {\r\n    const children = graph.children(id);\r\n    if (children.length > 0) {\r\n      log.warn(\r\n        \"Cluster identified\",\r\n        id,\r\n        \" Replacement id in edges: \",\r\n        findNonClusterChild(id, graph, id)\r\n      );\r\n      descendants.set(id, extractDescendants(id, graph));\r\n      clusterDb.set(id, { id: findNonClusterChild(id, graph, id), clusterData: graph.node(id) });\r\n    }\r\n  });\r\n  graph.nodes().forEach(function(id) {\r\n    const children = graph.children(id);\r\n    const edges = graph.edges();\r\n    if (children.length > 0) {\r\n      log.debug(\"Cluster identified\", id, descendants);\r\n      edges.forEach((edge) => {\r\n        const d1 = isDescendant(edge.v, id);\r\n        const d2 = isDescendant(edge.w, id);\r\n        if (d1 ^ d2) {\r\n          log.warn(\"Edge: \", edge, \" leaves cluster \", id);\r\n          log.warn(\"Descendants of XXX \", id, \": \", descendants.get(id));\r\n          clusterDb.get(id).externalConnections = true;\r\n        }\r\n      });\r\n    } else {\r\n      log.debug(\"Not a cluster \", id, descendants);\r\n    }\r\n  });\r\n  for (let id of clusterDb.keys()) {\r\n    const nonClusterChild = clusterDb.get(id).id;\r\n    const parent = graph.parent(nonClusterChild);\r\n    if (parent !== id && clusterDb.has(parent) && !clusterDb.get(parent).externalConnections) {\r\n      clusterDb.get(id).id = parent;\r\n    }\r\n  }\r\n  graph.edges().forEach(function(e) {\r\n    const edge = graph.edge(e);\r\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\r\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\r\n    let v = e.v;\r\n    let w = e.w;\r\n    log.warn(\r\n      \"Fix XXX\",\r\n      clusterDb,\r\n      \"ids:\",\r\n      e.v,\r\n      e.w,\r\n      \"Translating: \",\r\n      clusterDb.get(e.v),\r\n      \" --- \",\r\n      clusterDb.get(e.w)\r\n    );\r\n    if (clusterDb.get(e.v) || clusterDb.get(e.w)) {\r\n      log.warn(\"Fixing and trying - removing XXX\", e.v, e.w, e.name);\r\n      v = getAnchorId(e.v);\r\n      w = getAnchorId(e.w);\r\n      graph.removeEdge(e.v, e.w, e.name);\r\n      if (v !== e.v) {\r\n        const parent = graph.parent(v);\r\n        clusterDb.get(parent).externalConnections = true;\r\n        edge.fromCluster = e.v;\r\n      }\r\n      if (w !== e.w) {\r\n        const parent = graph.parent(w);\r\n        clusterDb.get(parent).externalConnections = true;\r\n        edge.toCluster = e.w;\r\n      }\r\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\r\n      graph.setEdge(v, w, edge, e.name);\r\n    }\r\n  });\r\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\r\n  extractor(graph, 0);\r\n  log.trace(clusterDb);\r\n}, \"adjustClustersAndEdges\");\r\nvar extractor = /* @__PURE__ */ __name((graph, depth) => {\r\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\r\n  if (depth > 10) {\r\n    log.error(\"Bailing out\");\r\n    return;\r\n  }\r\n  let nodes = graph.nodes();\r\n  let hasChildren = false;\r\n  for (const node of nodes) {\r\n    const children = graph.children(node);\r\n    hasChildren = hasChildren || children.length > 0;\r\n  }\r\n  if (!hasChildren) {\r\n    log.debug(\"Done, no node has children\", graph.nodes());\r\n    return;\r\n  }\r\n  log.debug(\"Nodes = \", nodes, depth);\r\n  for (const node of nodes) {\r\n    log.debug(\r\n      \"Extracting node\",\r\n      node,\r\n      clusterDb,\r\n      clusterDb.has(node) && !clusterDb.get(node).externalConnections,\r\n      !graph.parent(node),\r\n      graph.node(node),\r\n      graph.children(\"D\"),\r\n      \" Depth \",\r\n      depth\r\n    );\r\n    if (!clusterDb.has(node)) {\r\n      log.debug(\"Not a cluster\", node, depth);\r\n    } else if (!clusterDb.get(node).externalConnections && graph.children(node) && graph.children(node).length > 0) {\r\n      log.warn(\r\n        \"Cluster without external connections, without a parent and with children\",\r\n        node,\r\n        depth\r\n      );\r\n      const graphSettings = graph.graph();\r\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\r\n      if (clusterDb.get(node)?.clusterData?.dir) {\r\n        dir = clusterDb.get(node).clusterData.dir;\r\n        log.warn(\"Fixing dir\", clusterDb.get(node).clusterData.dir, dir);\r\n      }\r\n      const clusterGraph = new graphlib.Graph({\r\n        multigraph: true,\r\n        compound: true\r\n      }).setGraph({\r\n        rankdir: dir,\r\n        nodesep: 50,\r\n        ranksep: 50,\r\n        marginx: 8,\r\n        marginy: 8\r\n      }).setDefaultEdgeLabel(function() {\r\n        return {};\r\n      });\r\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\r\n      copy(node, graph, clusterGraph, node);\r\n      graph.setNode(node, {\r\n        clusterNode: true,\r\n        id: node,\r\n        clusterData: clusterDb.get(node).clusterData,\r\n        label: clusterDb.get(node).label,\r\n        graph: clusterGraph\r\n      });\r\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\r\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\r\n    } else {\r\n      log.warn(\r\n        \"Cluster ** \",\r\n        node,\r\n        \" **not meeting the criteria !externalConnections:\",\r\n        !clusterDb.get(node).externalConnections,\r\n        \" no parent: \",\r\n        !graph.parent(node),\r\n        \" children \",\r\n        graph.children(node) && graph.children(node).length > 0,\r\n        graph.children(\"D\"),\r\n        depth\r\n      );\r\n      log.debug(clusterDb);\r\n    }\r\n  }\r\n  nodes = graph.nodes();\r\n  log.warn(\"New list of nodes\", nodes);\r\n  for (const node of nodes) {\r\n    const data = graph.node(node);\r\n    log.warn(\" Now next level\", node, data);\r\n    if (data?.clusterNode) {\r\n      extractor(data.graph, depth + 1);\r\n    }\r\n  }\r\n}, \"extractor\");\r\nvar sorter = /* @__PURE__ */ __name((graph, nodes) => {\r\n  if (nodes.length === 0) {\r\n    return [];\r\n  }\r\n  let result = Object.assign([], nodes);\r\n  nodes.forEach((node) => {\r\n    const children = graph.children(node);\r\n    const sorted = sorter(graph, children);\r\n    result = [...result, ...sorted];\r\n  });\r\n  return result;\r\n}, \"sorter\");\r\nvar sortNodesByHierarchy = /* @__PURE__ */ __name((graph) => sorter(graph, graph.children()), \"sortNodesByHierarchy\");\r\n\r\n// src/rendering-util/layout-algorithms/dagre/index.js\r\nvar recursiveRender = /* @__PURE__ */ __name(async (_elem, graph, diagramType, id, parentCluster, siteConfig) => {\r\n  log.warn(\"Graph in recursive render:XAX\", graphlibJson2.write(graph), parentCluster);\r\n  const dir = graph.graph().rankdir;\r\n  log.trace(\"Dir in recursive render - dir:\", dir);\r\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\r\n  if (!graph.nodes()) {\r\n    log.info(\"No nodes found for\", graph);\r\n  } else {\r\n    log.info(\"Recursive render XXX\", graph.nodes());\r\n  }\r\n  if (graph.edges().length > 0) {\r\n    log.info(\"Recursive edges\", graph.edge(graph.edges()[0]));\r\n  }\r\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\r\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\r\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\r\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\r\n  await Promise.all(\r\n    graph.nodes().map(async function(v) {\r\n      const node = graph.node(v);\r\n      if (parentCluster !== void 0) {\r\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\r\n        log.trace(\r\n          \"Setting data for parent cluster XXX\\n Node.id = \",\r\n          v,\r\n          \"\\n data=\",\r\n          data.height,\r\n          \"\\nParent cluster\",\r\n          parentCluster.height\r\n        );\r\n        graph.setNode(parentCluster.id, data);\r\n        if (!graph.parent(v)) {\r\n          log.trace(\"Setting parent\", v, parentCluster.id);\r\n          graph.setParent(v, parentCluster.id, data);\r\n        }\r\n      }\r\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\r\n      if (node?.clusterNode) {\r\n        log.info(\"Cluster identified XBX\", v, node.width, graph.node(v));\r\n        const { ranksep, nodesep } = graph.graph();\r\n        node.graph.setGraph({\r\n          ...node.graph.graph(),\r\n          ranksep: ranksep + 25,\r\n          nodesep\r\n        });\r\n        const o = await recursiveRender(\r\n          nodes,\r\n          node.graph,\r\n          diagramType,\r\n          id,\r\n          graph.node(v),\r\n          siteConfig\r\n        );\r\n        const newEl = o.elem;\r\n        updateNodeBounds(node, newEl);\r\n        node.diff = o.diff || 0;\r\n        log.info(\r\n          \"New compound node after recursive render XAX\",\r\n          v,\r\n          \"width\",\r\n          // node,\r\n          node.width,\r\n          \"height\",\r\n          node.height\r\n          // node.x,\r\n          // node.y\r\n        );\r\n        setNodeElem(newEl, node);\r\n      } else {\r\n        if (graph.children(v).length > 0) {\r\n          log.trace(\r\n            \"Cluster - the non recursive path XBX\",\r\n            v,\r\n            node.id,\r\n            node,\r\n            node.width,\r\n            \"Graph:\",\r\n            graph\r\n          );\r\n          log.trace(findNonClusterChild(node.id, graph));\r\n          clusterDb.set(node.id, { id: findNonClusterChild(node.id, graph), node });\r\n        } else {\r\n          log.trace(\"Node - the non recursive path XAX\", v, nodes, graph.node(v), dir);\r\n          await insertNode(nodes, graph.node(v), { config: siteConfig, dir });\r\n        }\r\n      }\r\n    })\r\n  );\r\n  const processEdges = /* @__PURE__ */ __name(async () => {\r\n    const edgePromises = graph.edges().map(async function(e) {\r\n      const edge = graph.edge(e.v, e.w, e.name);\r\n      log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\r\n      log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\r\n      log.info(\r\n        \"Fix\",\r\n        clusterDb,\r\n        \"ids:\",\r\n        e.v,\r\n        e.w,\r\n        \"Translating: \",\r\n        clusterDb.get(e.v),\r\n        clusterDb.get(e.w)\r\n      );\r\n      await insertEdgeLabel(edgeLabels, edge);\r\n    });\r\n    await Promise.all(edgePromises);\r\n  }, \"processEdges\");\r\n  await processEdges();\r\n  log.info(\"Graph before layout:\", JSON.stringify(graphlibJson2.write(graph)));\r\n  log.info(\"############################################# XXX\");\r\n  log.info(\"###                Layout                 ### XXX\");\r\n  log.info(\"############################################# XXX\");\r\n  dagreLayout(graph);\r\n  log.info(\"Graph after layout:\", JSON.stringify(graphlibJson2.write(graph)));\r\n  let diff = 0;\r\n  let { subGraphTitleTotalMargin } = getSubGraphTitleMargins(siteConfig);\r\n  await Promise.all(\r\n    sortNodesByHierarchy(graph).map(async function(v) {\r\n      const node = graph.node(v);\r\n      log.info(\r\n        \"Position XBX => \" + v + \": (\" + node.x,\r\n        \",\" + node.y,\r\n        \") width: \",\r\n        node.width,\r\n        \" height: \",\r\n        node.height\r\n      );\r\n      if (node?.clusterNode) {\r\n        node.y += subGraphTitleTotalMargin;\r\n        log.info(\r\n          \"A tainted cluster node XBX1\",\r\n          v,\r\n          node.id,\r\n          node.width,\r\n          node.height,\r\n          node.x,\r\n          node.y,\r\n          graph.parent(v)\r\n        );\r\n        clusterDb.get(node.id).node = node;\r\n        positionNode(node);\r\n      } else {\r\n        if (graph.children(v).length > 0) {\r\n          log.info(\r\n            \"A pure cluster node XBX1\",\r\n            v,\r\n            node.id,\r\n            node.x,\r\n            node.y,\r\n            node.width,\r\n            node.height,\r\n            graph.parent(v)\r\n          );\r\n          node.height += subGraphTitleTotalMargin;\r\n          graph.node(node.parentId);\r\n          const halfPadding = node?.padding / 2 || 0;\r\n          const labelHeight = node?.labelBBox?.height || 0;\r\n          const offsetY = labelHeight - halfPadding || 0;\r\n          log.debug(\"OffsetY\", offsetY, \"labelHeight\", labelHeight, \"halfPadding\", halfPadding);\r\n          await insertCluster(clusters, node);\r\n          clusterDb.get(node.id).node = node;\r\n        } else {\r\n          const parent = graph.node(node.parentId);\r\n          node.y += subGraphTitleTotalMargin / 2;\r\n          log.info(\r\n            \"A regular node XBX1 - using the padding\",\r\n            node.id,\r\n            \"parent\",\r\n            node.parentId,\r\n            node.width,\r\n            node.height,\r\n            node.x,\r\n            node.y,\r\n            \"offsetY\",\r\n            node.offsetY,\r\n            \"parent\",\r\n            parent,\r\n            parent?.offsetY,\r\n            node\r\n          );\r\n          positionNode(node);\r\n        }\r\n      }\r\n    })\r\n  );\r\n  graph.edges().forEach(function(e) {\r\n    const edge = graph.edge(e);\r\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\r\n    edge.points.forEach((point) => point.y += subGraphTitleTotalMargin / 2);\r\n    const startNode = graph.node(e.v);\r\n    var endNode = graph.node(e.w);\r\n    const paths = insertEdge(edgePaths, edge, clusterDb, diagramType, startNode, endNode, id);\r\n    positionEdgeLabel(edge, paths);\r\n  });\r\n  graph.nodes().forEach(function(v) {\r\n    const n = graph.node(v);\r\n    log.info(v, n.type, n.diff);\r\n    if (n.isGroup) {\r\n      diff = n.diff;\r\n    }\r\n  });\r\n  log.warn(\"Returning from recursive render XAX\", elem, diff);\r\n  return { elem, diff };\r\n}, \"recursiveRender\");\r\nvar render = /* @__PURE__ */ __name(async (data4Layout, svg) => {\r\n  const graph = new graphlib2.Graph({\r\n    multigraph: true,\r\n    compound: true\r\n  }).setGraph({\r\n    rankdir: data4Layout.direction,\r\n    nodesep: data4Layout.config?.nodeSpacing || data4Layout.config?.flowchart?.nodeSpacing || data4Layout.nodeSpacing,\r\n    ranksep: data4Layout.config?.rankSpacing || data4Layout.config?.flowchart?.rankSpacing || data4Layout.rankSpacing,\r\n    marginx: 8,\r\n    marginy: 8\r\n  }).setDefaultEdgeLabel(function() {\r\n    return {};\r\n  });\r\n  const element = svg.select(\"g\");\r\n  markers_default(element, data4Layout.markers, data4Layout.type, data4Layout.diagramId);\r\n  clear3();\r\n  clear2();\r\n  clear();\r\n  clear4();\r\n  data4Layout.nodes.forEach((node) => {\r\n    graph.setNode(node.id, { ...node });\r\n    if (node.parentId) {\r\n      graph.setParent(node.id, node.parentId);\r\n    }\r\n  });\r\n  log.debug(\"Edges:\", data4Layout.edges);\r\n  data4Layout.edges.forEach((edge) => {\r\n    if (edge.start === edge.end) {\r\n      const nodeId = edge.start;\r\n      const specialId1 = nodeId + \"---\" + nodeId + \"---1\";\r\n      const specialId2 = nodeId + \"---\" + nodeId + \"---2\";\r\n      const node = graph.node(nodeId);\r\n      graph.setNode(specialId1, {\r\n        domId: specialId1,\r\n        id: specialId1,\r\n        parentId: node.parentId,\r\n        labelStyle: \"\",\r\n        label: \"\",\r\n        padding: 0,\r\n        shape: \"labelRect\",\r\n        // shape: 'rect',\r\n        style: \"\",\r\n        width: 10,\r\n        height: 10\r\n      });\r\n      graph.setParent(specialId1, node.parentId);\r\n      graph.setNode(specialId2, {\r\n        domId: specialId2,\r\n        id: specialId2,\r\n        parentId: node.parentId,\r\n        labelStyle: \"\",\r\n        padding: 0,\r\n        // shape: 'rect',\r\n        shape: \"labelRect\",\r\n        label: \"\",\r\n        style: \"\",\r\n        width: 10,\r\n        height: 10\r\n      });\r\n      graph.setParent(specialId2, node.parentId);\r\n      const edge1 = structuredClone(edge);\r\n      const edgeMid = structuredClone(edge);\r\n      const edge2 = structuredClone(edge);\r\n      edge1.label = \"\";\r\n      edge1.arrowTypeEnd = \"none\";\r\n      edge1.id = nodeId + \"-cyclic-special-1\";\r\n      edgeMid.arrowTypeEnd = \"none\";\r\n      edgeMid.id = nodeId + \"-cyclic-special-mid\";\r\n      edge2.label = \"\";\r\n      if (node.isGroup) {\r\n        edge1.fromCluster = nodeId;\r\n        edge2.toCluster = nodeId;\r\n      }\r\n      edge2.id = nodeId + \"-cyclic-special-2\";\r\n      graph.setEdge(nodeId, specialId1, edge1, nodeId + \"-cyclic-special-0\");\r\n      graph.setEdge(specialId1, specialId2, edgeMid, nodeId + \"-cyclic-special-1\");\r\n      graph.setEdge(specialId2, nodeId, edge2, nodeId + \"-cyc<lic-special-2\");\r\n    } else {\r\n      graph.setEdge(edge.start, edge.end, { ...edge }, edge.id);\r\n    }\r\n  });\r\n  log.warn(\"Graph at first:\", JSON.stringify(graphlibJson2.write(graph)));\r\n  adjustClustersAndEdges(graph);\r\n  log.warn(\"Graph after XAX:\", JSON.stringify(graphlibJson2.write(graph)));\r\n  const siteConfig = getConfig();\r\n  await recursiveRender(\r\n    element,\r\n    graph,\r\n    data4Layout.type,\r\n    data4Layout.diagramId,\r\n    void 0,\r\n    siteConfig\r\n  );\r\n}, \"render\");\r\nexport {\r\n  render\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
